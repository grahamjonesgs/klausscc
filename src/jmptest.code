                           -- //test
                           -- // test msg
                           -- BEGIN:
0x00000000: 0800 00BC 69DB -- SETR A 12347867
0x00000002: 0801 0000 001A -- SETR B 0x001A
0x00000004: 0802 0000 1111 -- SETR C 0x1111
0x00000006: 0312           -- or B C
0x00000006: 0312           -- OR B C // Hello
                           -- 
0x00000007: 3071 0000 4321 -- 7SEG1V 0x4321
0x00000009: 3071 0000 4321 -- 7SEG1V 0x4321
0x0000000B: F013 0000 FFFF -- DELAYV 0xFFFF
                           -- 
                           -- DISPLOOP:
0x0000000D: 0850           -- DECR A
0x0000000E: 1001 0000 0000 -- JMPZ BEGIN:   // Restart if we reached zero
                           -- 
                           -- 
                           -- // Call function
0x00000010: 4000           -- PUSH A // Push A on Stack
0x00000011: 4001           -- PUSH B
0x00000012: 1009 0000 0026 -- CALL F_DEC_STACK_TOP:
0x00000014: 4011           -- POP B
0x00000015: 4010           -- POP A
                           -- 
                           -- 
0x00000016: 3071 0000 000A -- 7SEG1V 0x00A
0x00000018: F013 0000 FFFF -- DELAYV 0xFFFF
0x0000001A: 3040           -- 7SEGR A
0x0000001B: F013 0000 FFFF -- DELAYV 0xFFFF
0x0000001D: 3071 0000 000B -- 7SEG1V 0x00B
0x0000001F: F013 0000 FFFF -- DELAYV 0xFFFF
0x00000021: 3041           -- 7SEGR B
0x00000022: F013 0000 FFFF -- DELAYV 0xFFFF
0x00000024: 1000 0000 000D -- JMP DISPLOOP:
                           -- 
                           -- // Proc to be called
                           -- F_DEC_STACK_TOP:
0x00000026: 4013           -- POP D  // Store ret value
0x00000027: 4012           -- POP C
0x00000028: 0852           -- DECR C
0x00000029: 4002           -- PUSH C
0x0000002A: 4003           -- PUSH D // Push back ret value
0x0000002B: 1012           -- RET
