                           -- //test
                           -- // test msg
0x00000000: 0400           -- XOR A A // From macro $TESTM2
0x00000001: 4000           -- PUSH A // From macro $TESTM2
0x00000002: 4001           -- PUSH B // From macro $TESTM2
0x00000003: 4002           -- PUSH C // From macro $TESTM2
0x00000004: F010           -- NOP // From macro $TESTM2
                           -- BEGIN:
0x00000005: 0800 00BC 69DB -- SETR A 12347867
0x00000007: 0801 0000 001A -- SETR B 0x001A
0x00000009: 0802 0000 1110 -- SETR C 0x1110
0x0000000B: 0312           -- or B C     
0x0000000B: 0313           -- OR B D // Hello
0x0000000C: F010           -- NOP // From macro $TESTM
0x0000000D: F010           -- NOP // From macro $TESTM
0x0000000E: F010           -- NOP // From macro $TESTM
0x0000000F: 4010           -- POP A // From macro $POPALL
0x00000010: 4011           -- POP B // From macro $POPALL
0x00000011: 4012           -- POP C // From macro $POPALL
0x00000012: 3071 0000 4321 -- 7SEG1V 0x4321
0x00000014: 3071 0000 4321 -- 7SEG1V 0x4321
0x00000016: F013 0000 FFFF -- DELAYV 0xFFFF// test message
                           -- 
                           -- DISPLOOP:
0x00000018: 0850           -- DECR A
0x00000019: 1001 0000 0005 -- JMPZ BEGIN:   // Restart if we reached zero
                           -- 
                           -- 
                           -- // Call function
0x0000001B: 4000           -- PUSH A // Push A on Stack
0x0000001C: 4001           -- PUSH B
0x0000001D: 1009 0000 0031 -- CALL F_DEC_STACK_TOP:
0x0000001F: 4011           -- POP B
0x00000020: 4010           -- POP A
                           -- 
                           -- 
0x00000021: 3071 0000 000A -- 7SEG1V 0x00A
0x00000023: F013 0000 FFFF -- DELAYV 0xFFFF
0x00000025: 3040           -- 7SEGR A
0x00000026: F013 0000 FFFF -- DELAYV 0xFFFF
0x00000028: 3071 0000 000B -- 7SEG1V 0x00B
0x0000002A: F013 0000 FFFF -- DELAYV 0xFFFF
0x0000002C: 3041           -- 7SEGR B
0x0000002D: F013 0000 FFFF -- DELAYV 0xFFFF
0x0000002F: 1000 0000 0018 -- JMP DISPLOOP:
                           -- 
                           -- // Proc to be called
                           -- F_DEC_STACK_TOP:
0x00000031: 4013           -- POP D  // Store ret value
0x00000032: 4012           -- POP C
0x00000033: 0852           -- DECR C
0x00000034: 4002           -- PUSH C
0x00000035: 4003           -- PUSH D // Push back ret value
0x00000036: 1012           -- RET
